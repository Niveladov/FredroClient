//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TwinklCRM.Client.SchedulerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SchedulerService.ISchedulerService", CallbackContract=typeof(TwinklCRM.Client.SchedulerService.ISchedulerServiceCallback))]
    public interface ISchedulerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/Join")]
        void Join();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/Join")]
        System.Threading.Tasks.Task JoinAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerService/GetResources", ReplyAction="http://tempuri.org/ISchedulerService/GetResourcesResponse")]
        TwinklCRM.DAL.Models.DatabaseObjectModels.Views.ViewVehicle[] GetResources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchedulerService/GetResources", ReplyAction="http://tempuri.org/ISchedulerService/GetResourcesResponse")]
        System.Threading.Tasks.Task<TwinklCRM.DAL.Models.DatabaseObjectModels.Views.ViewVehicle[]> GetResourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/AssignAppointment")]
        void AssignAppointment(int appointmentId, int resourceId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/AssignAppointment")]
        System.Threading.Tasks.Task AssignAppointmentAsync(int appointmentId, int resourceId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/CancelAppointment")]
        void CancelAppointment(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/CancelAppointment")]
        System.Threading.Tasks.Task CancelAppointmentAsync(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/DeleteAppointment")]
        void DeleteAppointment(int appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/DeleteAppointment")]
        System.Threading.Tasks.Task DeleteAppointmentAsync(int appointmentId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISchedulerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/SendAssignedAppointments")]
        void SendAssignedAppointments(TwinklCRM.DAL.Models.DatabaseObjectModels.Views.ViewAssignedDeal[] assignedAppointments);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISchedulerService/SendFreeAppointments")]
        void SendFreeAppointments(TwinklCRM.DAL.Models.DatabaseObjectModels.Tables.Deal[] freeAppointments);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISchedulerServiceChannel : TwinklCRM.Client.SchedulerService.ISchedulerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SchedulerServiceClient : System.ServiceModel.DuplexClientBase<TwinklCRM.Client.SchedulerService.ISchedulerService>, TwinklCRM.Client.SchedulerService.ISchedulerService {
        
        public SchedulerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SchedulerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SchedulerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SchedulerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SchedulerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Join() {
            base.Channel.Join();
        }
        
        public System.Threading.Tasks.Task JoinAsync() {
            return base.Channel.JoinAsync();
        }
        
        public TwinklCRM.DAL.Models.DatabaseObjectModels.Views.ViewVehicle[] GetResources() {
            return base.Channel.GetResources();
        }
        
        public System.Threading.Tasks.Task<TwinklCRM.DAL.Models.DatabaseObjectModels.Views.ViewVehicle[]> GetResourcesAsync() {
            return base.Channel.GetResourcesAsync();
        }
        
        public void AssignAppointment(int appointmentId, int resourceId) {
            base.Channel.AssignAppointment(appointmentId, resourceId);
        }
        
        public System.Threading.Tasks.Task AssignAppointmentAsync(int appointmentId, int resourceId) {
            return base.Channel.AssignAppointmentAsync(appointmentId, resourceId);
        }
        
        public void CancelAppointment(int appointmentId) {
            base.Channel.CancelAppointment(appointmentId);
        }
        
        public System.Threading.Tasks.Task CancelAppointmentAsync(int appointmentId) {
            return base.Channel.CancelAppointmentAsync(appointmentId);
        }
        
        public void DeleteAppointment(int appointmentId) {
            base.Channel.DeleteAppointment(appointmentId);
        }
        
        public System.Threading.Tasks.Task DeleteAppointmentAsync(int appointmentId) {
            return base.Channel.DeleteAppointmentAsync(appointmentId);
        }
    }
}
